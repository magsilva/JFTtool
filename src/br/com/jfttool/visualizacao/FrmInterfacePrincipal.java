/*
 * JFTtool - Java Functional Testing tool
 * Created: 03/06/2012
 * 
 * Created by:
 *      Alexandre Ponce de Oliveira - alexandreponce at icmc.usp.br
 *      Daniela Oliveira Francisco - doliveira at sc.usp.br
 *      Edilson José Davoglio Candido - edilson at icmc.usp.br
 *      Filipe Del Nero Grillo - grillo at icmc.usp.br
 *      José Ricardo Furlan Ronqui - jose.ronqui at usp.br
 *      Marcelo Benites Gonçalves - marcelob at icmc.usp.br
 *      Sofia Larissa Costa - sofialc at icmc.usp.br
 * 
 * Copyright (c) 2012
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the project's authors nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
package br.com.jfttool.visualizacao;

import br.com.jfttool.connection.DbConn;
import br.com.jfttool.controle.ControleInterface;
import br.com.jfttool.enums.TipoCriterio;
import br.com.jfttool.enums.TipoEntrada;
import br.com.jfttool.enums.TipoRelacionamento;
import br.com.jfttool.enums.TipoRestricao;
import br.com.jfttool.geracao.DesenhaGrafo;
import br.com.jfttool.models.*;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 * @author JFTtool Team
 */
public class FrmInterfacePrincipal extends javax.swing.JFrame {

    javax.swing.DefaultListModel modelo1 = new javax.swing.DefaultListModel();
    
    private static ControleInterface controleInterface;
    Entrada entrada;
    ArrayList<Restricao> arrayListRestricoesValidas;
    ArrayList<Restricao> arrayListRestricoesInvalidas;
    DefaultListModel itensClasseValida;
    DefaultListModel itensClasseInvalida;
    DefaultTableModel dadosJTableEntrada;
    
    JFrame popupGrafo = new JFrame("Grafo Causa-Efeito");

    /**
     * Creates new form FrmInterfacePrincipal
     */
    public FrmInterfacePrincipal() {
        initComponents();
        entrada = new Entrada();
        arrayListRestricoesValidas = new ArrayList<Restricao>();
        arrayListRestricoesInvalidas = new ArrayList<Restricao>();
        itensClasseValida = new DefaultListModel(); //model para controlar os itens que ficam armazenados no combobox jListClasseValida
        itensClasseInvalida = new DefaultListModel(); //model para controlar os itens que ficam armazenados no combobox jListClasseInvalida
        //Desabilita os paineis no início, vai habilitar depois que inserir um projeto
        jTabbedPane1.setEnabled(false);
        for (int i=0; i < jPanel1.getComponents().length; i++) {
            jPanel1.getComponent(i).setEnabled(false);
        }
        for (int i=0; i < jPanel2.getComponents().length; i++) {
            jPanel2.getComponent(i).setEnabled(false);
        }
        for (int i=0; i < jPanel4.getComponents().length; i++) {
            jPanel4.getComponent(i).setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jMenu1 = new javax.swing.JMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        grupoEntreCausas = new javax.swing.ButtonGroup();
        grupoCompostaRelacao2 = new javax.swing.ButtonGroup();
        grupoCausaEfeitoRelacionamento = new javax.swing.ButtonGroup();
        grupoRestricaoConsequencia = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelEntrada = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfVariavelEntrada = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbTipoVariavelEntrada = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cbClasseValida = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListClasseValida = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cbClasseInvalida = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListClasseInvalida = new javax.swing.JList();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTableEntradas = new javax.swing.JTable();
        btnAdicionarEntrada = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        nomePadraoSaida = new javax.swing.JTextField();
        jScrollPane11 = new javax.swing.JScrollPane();
        conteudoDaSaida = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane10 = new javax.swing.JScrollPane();
        tabelaDeSaidas = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        panelValorLimite = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        tbCasosLimite = new javax.swing.JTable();
        btCasosTesteLimite = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        btDadosAnVlLimite = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbValorLimite = new javax.swing.JTable();
        panelParticionamento = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btDadosPTClasses = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        tbPartClasses = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        btCasosTesteClasses = new javax.swing.JButton();
        jScrollPane18 = new javax.swing.JScrollPane();
        tbCasosParticionamento = new javax.swing.JTable();
        jTextField3 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        panelGrafo = new javax.swing.JPanel();
        abasGrafo = new javax.swing.JTabbedPane();
        painelGrafoCausasEEfeitos = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        comboEntradasGrafo = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        campoValorEntrada = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        comboSaidasGrafo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        campoDescricaoEntrada = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        campoDescricaoSaida = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbCausasEfeitos = new javax.swing.JTable();
        painelGrafoCausasCompostas = new javax.swing.JPanel();
        panel2 = new java.awt.Panel();
        botaoAdicionaCausaComposta = new javax.swing.JButton();
        textArea1 = new java.awt.TextArea();
        jLabel23 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jComboBox18 = new javax.swing.JComboBox();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jComboBox16 = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane12 = new javax.swing.JScrollPane();
        tabelaRelCausaEfeito = new javax.swing.JTable();
        painelGrafoRelCausaEfeito = new javax.swing.JPanel();
        panel4 = new java.awt.Panel();
        jLabel19 = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox();
        botaoAdicionaCausaEfeito = new javax.swing.JButton();
        textArea2 = new java.awt.TextArea();
        jLabel26 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        tabelaCausasCompostas = new javax.swing.JTable();
        painelGrafoRestricoes = new javax.swing.JPanel();
        panel5 = new java.awt.Panel();
        jLabel25 = new javax.swing.JLabel();
        botaoAdicionaRestricao = new javax.swing.JButton();
        textArea3 = new java.awt.TextArea();
        jLabel28 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        comboRestricoesCausa = new javax.swing.JComboBox();
        textArea5 = new java.awt.TextArea();
        textArea6 = new java.awt.TextArea();
        textArea7 = new java.awt.TextArea();
        choice1 = new java.awt.Choice();
        jButton2 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton10 = new javax.swing.JRadioButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jLabel32 = new javax.swing.JLabel();
        comboRestricoesCausaOuEfeito = new javax.swing.JComboBox();
        comboRestricoesEfeitos = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        tabelaRestricoesCausa = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        tabelaRestricoesEfeito = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        painelGrafoTabela = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        panel3 = new java.awt.Panel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbDecisaoCausa = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbDecisaoEfeito = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuProjeto = new javax.swing.JMenu();
        jMenuItemNovo = new javax.swing.JMenuItem();
        jMenuItemAbrirProjeto = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ferramenta de Teste Funcional");

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        panelEntrada.setName("panelEntrada");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Definição do Domínio de Entrada"));

        jLabel1.setText("Variável de Entrada:");

        tfVariavelEntrada.setName("");

        jLabel2.setText("Tipo da Variável de Entrada:");

        cbTipoVariavelEntrada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Escolha o Tipo", "Inteiro", "Real", "String" }));
        cbTipoVariavelEntrada.setName("");
        cbTipoVariavelEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoVariavelEntradaActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Defina as Classes Válidas"));
        jPanel4.setPreferredSize(new java.awt.Dimension(164, 270));

        jLabel4.setText("Classe Válida:");

        cbClasseValida.setName("");
        cbClasseValida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClasseValidaActionPerformed(evt);
            }
        });

        jListClasseValida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jListClasseValidaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jListClasseValida);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbClasseValida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbClasseValida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Defina as Classes Inválidas"));

        jLabel3.setText("Classe Inválida:");

        cbClasseInvalida.setName("");
        cbClasseInvalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClasseInvalidaActionPerformed(evt);
            }
        });

        jListClasseInvalida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jListClasseInvalidaKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jListClasseInvalida);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbClasseInvalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbClasseInvalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane14.setPreferredSize(new java.awt.Dimension(50, 50));

        jTableEntradas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Tipo", "Classe Válida", "Classe Inválida"
            }
        ));
        jScrollPane14.setViewportView(jTableEntradas);

        btnAdicionarEntrada.setText("Adicionar");
        btnAdicionarEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarEntradaActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfVariavelEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbTipoVariavelEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLimpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdicionarEntrada))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfVariavelEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cbTipoVariavelEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdicionarEntrada)
                    .addComponent(btnLimpar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelEntradaLayout = new javax.swing.GroupLayout(panelEntrada);
        panelEntrada.setLayout(panelEntradaLayout);
        panelEntradaLayout.setHorizontalGroup(
            panelEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelEntradaLayout.setVerticalGroup(
            panelEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Domínio de Entrada", panelEntrada);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Definição do Domínio de Saída"));

        jLabel8.setText("Nome do Padrão da Saída:");

        nomePadraoSaida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomePadraoSaidaActionPerformed(evt);
            }
        });

        conteudoDaSaida.setColumns(20);
        conteudoDaSaida.setRows(5);
        jScrollPane11.setViewportView(conteudoDaSaida);

        jLabel9.setText("Conteúdo da Saída:");

        jLabel10.setText("Tipo de Saída:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Válida", "Inválida" }));

        tabelaDeSaidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id_saída", "Nome", "Conteúdo", "Tipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane10.setViewportView(tabelaDeSaidas);

        jLabel18.setText("Lista de Saídas:");

        jButton3.setText("Adicionar Saída");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Limpar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(nomePadraoSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(211, 211, 211))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addComponent(jScrollPane10)
                        .addGap(182, 182, 182))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(176, 176, 176))))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nomePadraoSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1))
                .addGap(11, 11, 11)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 818, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Domínio de Saída", jPanel11);

        panelValorLimite.setName("panelValorLimite");

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Criação de Casos de Teste"));

        tbCasosLimite.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane19.setViewportView(tbCasosLimite);

        btCasosTesteLimite.setText("Adicionar Caso de Teste");
        btCasosTesteLimite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCasosTesteLimiteActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Id do Dado de Teste:");

        jLabel24.setText("Id da Saída Esperada:");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane19)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btCasosTesteLimite)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGap(0, 2, Short.MAX_VALUE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(478, 478, 478)))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(btCasosTesteLimite)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 84, Short.MAX_VALUE))
        );

        btCasosTesteLimite.getAccessibleContext().setAccessibleName("Adicionar Saída");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados de Teste"));

        btDadosAnVlLimite.setText("Gerar Dados de Teste");
        btDadosAnVlLimite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDadosAnVlLimiteActionPerformed(evt);
            }
        });

        tbValorLimite.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "E1", "E2", "E3", "Saída"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbValorLimite.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tbValorLimite);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(btDadosAnVlLimite)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(btDadosAnVlLimite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelValorLimiteLayout = new javax.swing.GroupLayout(panelValorLimite);
        panelValorLimite.setLayout(panelValorLimiteLayout);
        panelValorLimiteLayout.setHorizontalGroup(
            panelValorLimiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelValorLimiteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelValorLimiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(110, 110, 110))
        );
        panelValorLimiteLayout.setVerticalGroup(
            panelValorLimiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelValorLimiteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jTabbedPane1.addTab("Análise de Valor Limite", null, panelValorLimite, "");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados de Teste"));

        btDadosPTClasses.setText("Gerar Dados de Teste");
        btDadosPTClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDadosPTClassesActionPerformed(evt);
            }
        });

        tbPartClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Saída (manual)"
            }
        ));
        jScrollPane17.setViewportView(tbPartClasses);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btDadosPTClasses)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane17))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(btDadosPTClasses)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Criação de Casos de Teste"));

        btCasosTesteClasses.setText("Adicionar Caso de Teste");
        btCasosTesteClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCasosTesteClassesActionPerformed(evt);
            }
        });

        tbCasosParticionamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane18.setViewportView(tbCasosParticionamento);

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel27.setText("Id do Dado de Teste:");

        jLabel35.setText("Id da Saída Esperada: ");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel35)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox2, 0, 147, Short.MAX_VALUE)
                            .addComponent(jTextField3))
                        .addGap(18, 18, 18)
                        .addComponent(btCasosTesteClasses)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btCasosTesteClasses))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelParticionamentoLayout = new javax.swing.GroupLayout(panelParticionamento);
        panelParticionamento.setLayout(panelParticionamentoLayout);
        panelParticionamentoLayout.setHorizontalGroup(
            panelParticionamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParticionamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParticionamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelParticionamentoLayout.setVerticalGroup(
            panelParticionamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParticionamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Particionamento Classes Equivalência", panelParticionamento);

        abasGrafo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                trocaEstadoAbasGrafo(evt);
            }
        });

        jLabel5.setText("Entradas");

        comboEntradasGrafo.setName("cboEntradas");
        comboEntradasGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEntradasGrafoActionPerformed(evt);
            }
        });

        jLabel17.setText("Valor");

        campoValorEntrada.setToolTipText("Digite um valor");

        jButton4.setText("Adicionar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        comboSaidasGrafo.setName("cboEntradas");

        jLabel6.setText("Saídas");

        jLabel21.setText("Descrição");

        campoDescricaoEntrada.setToolTipText("Digite um valor");

        jLabel22.setText("Descrição");

        campoDescricaoSaida.setToolTipText("Digite um valor");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboEntradasGrafo, 0, 170, Short.MAX_VALUE)
                    .addComponent(comboSaidasGrafo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoDescricaoSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(jButton4))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoDescricaoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoValorEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel17)
                                .addComponent(campoValorEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel21)
                                .addComponent(campoDescricaoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel22)
                                .addComponent(campoDescricaoSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton4))
                        .addContainerGap())
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(comboEntradasGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboSaidasGrafo)
                            .addComponent(jLabel6))
                        .addGap(22, 22, 22))))
        );

        PopulaComboEntradas();
        PopulaComboSaidas();

        tbCausasEfeitos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tbCausasEfeitos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id do Nó", "Id da Entrada", "Id da Saída", "Tipo", "Nome", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PreencheTabela();
        tbCausasEfeitos.setToolTipText("");
        tbCausasEfeitos.setEnabled(false);
        tbCausasEfeitos.setName("tbCausasEfeitos");
        jScrollPane5.setViewportView(tbCausasEfeitos);

        javax.swing.GroupLayout painelGrafoCausasEEfeitosLayout = new javax.swing.GroupLayout(painelGrafoCausasEEfeitos);
        painelGrafoCausasEEfeitos.setLayout(painelGrafoCausasEEfeitosLayout);
        painelGrafoCausasEEfeitosLayout.setHorizontalGroup(
            painelGrafoCausasEEfeitosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoCausasEEfeitosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelGrafoCausasEEfeitosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(painelGrafoCausasEEfeitosLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 31, Short.MAX_VALUE))))
        );
        painelGrafoCausasEEfeitosLayout.setVerticalGroup(
            painelGrafoCausasEEfeitosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelGrafoCausasEEfeitosLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );

        abasGrafo.addTab("Causas e efeitos", painelGrafoCausasEEfeitos);

        painelGrafoCausasCompostas.setMaximumSize(new java.awt.Dimension(32767, 32765));

        botaoAdicionaCausaComposta.setText("Adicionar Causa Composta");
        botaoAdicionaCausaComposta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionaCausaCompostaActionPerformed(evt);
            }
        });

        jLabel23.setText("Causas / Causas Compostas 1 ");

        jLabel29.setText("Relação");

        jComboBox18.setFocusCycleRoot(true);
        jComboBox18.setName("cboEntradas");
        jComboBox18.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox18ItemStateChanged(evt);
            }
        });
        jComboBox18.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox18PropertyChange(evt);
            }
        });

        jLabel30.setText("Causas / Causas Compostas 2 ");

        jLabel31.setText("Relação");

        jLabel20.setText("Função entre as causas");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("Identidade");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("NOT");

        grupoCompostaRelacao2.add(jRadioButton5);
        jRadioButton5.setSelected(true);
        jRadioButton5.setText("Identidade");

        grupoCompostaRelacao2.add(jRadioButton6);
        jRadioButton6.setText("NOT");

        grupoEntreCausas.add(jRadioButton7);
        jRadioButton7.setText("OR");

        grupoEntreCausas.add(jRadioButton8);
        jRadioButton8.setSelected(true);
        jRadioButton8.setText("AND");

        jComboBox16.setFocusCycleRoot(true);
        jComboBox16.setName("cboEntradas");
        jComboBox16.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox16ItemStateChanged(evt);
            }
        });
        jComboBox16.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox16PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel2Layout.createSequentialGroup()
                                .addComponent(jRadioButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                                    .addComponent(jRadioButton8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jRadioButton7)
                                    .addGap(41, 41, 41)))
                            .addComponent(botaoAdicionaCausaComposta))
                        .addGap(39, 39, 39)))
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton6))
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton5)
                            .addComponent(jRadioButton6)))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel2Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioButton8)
                                    .addComponent(jRadioButton7)))
                            .addGroup(panel2Layout.createSequentialGroup()
                                .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel29)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioButton3)
                                    .addComponent(jRadioButton4))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(botaoAdicionaCausaComposta)
                .addGap(23, 23, 23))
        );

        PopulaComboCausas2();
        PopulaComboCausas1();

        tabelaRelCausaEfeito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Causa1_id", "Causa2_id", "CausaComposta1_id", "CausaComposta2_id", "TipoRelacionamento", "Relacao_c1", "Relacao_c2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaRelCausaEfeito.setEnabled(false);
        tabelaRelCausaEfeito.setFocusable(false);
        jScrollPane12.setViewportView(tabelaRelCausaEfeito);
        tabelaRelCausaEfeito.getColumnModel().getColumn(0).setResizable(false);
        tabelaRelCausaEfeito.getColumnModel().getColumn(0).setPreferredWidth(5);
        tabelaRelCausaEfeito.getColumnModel().getColumn(1).setResizable(false);
        tabelaRelCausaEfeito.getColumnModel().getColumn(1).setPreferredWidth(17);
        tabelaRelCausaEfeito.getColumnModel().getColumn(2).setResizable(false);
        tabelaRelCausaEfeito.getColumnModel().getColumn(2).setPreferredWidth(17);
        tabelaRelCausaEfeito.getColumnModel().getColumn(3).setResizable(false);
        tabelaRelCausaEfeito.getColumnModel().getColumn(6).setPreferredWidth(20);
        tabelaRelCausaEfeito.getColumnModel().getColumn(7).setPreferredWidth(20);

        javax.swing.GroupLayout painelGrafoCausasCompostasLayout = new javax.swing.GroupLayout(painelGrafoCausasCompostas);
        painelGrafoCausasCompostas.setLayout(painelGrafoCausasCompostasLayout);
        painelGrafoCausasCompostasLayout.setHorizontalGroup(
            painelGrafoCausasCompostasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoCausasCompostasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelGrafoCausasCompostasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane12))
                .addGap(953, 953, 953)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelGrafoCausasCompostasLayout.setVerticalGroup(
            painelGrafoCausasCompostasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoCausasCompostasLayout.createSequentialGroup()
                .addGroup(painelGrafoCausasCompostasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelGrafoCausasCompostasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        abasGrafo.addTab("Causas compostas", painelGrafoCausasCompostas);

        panel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel19.setText("Causas / Causas Compostas");

        jComboBox12.setFocusCycleRoot(true);
        jComboBox12.setName("cboEntradas");
        jComboBox12.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox12ItemStateChanged(evt);
            }
        });
        jComboBox12.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox12PropertyChange(evt);
            }
        });

        botaoAdicionaCausaEfeito.setText("Adicionar Causa-Efeito");
        botaoAdicionaCausaEfeito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionaCausaEfeitoActionPerformed(evt);
            }
        });

        jLabel26.setText("Tipo de Relacionamento");

        jComboBox8.setName("cboEntradas");

        jLabel12.setText("Efeitos");

        grupoCausaEfeitoRelacionamento.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Identidade");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        grupoCausaEfeitoRelacionamento.add(jRadioButton2);
        jRadioButton2.setText("NOT");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
        panel4.setLayout(panel4Layout);
        panel4Layout.setHorizontalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoAdicionaCausaEfeito)
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel4Layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton2))
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))))
                .addGap(68, 68, 68))
        );
        panel4Layout.setVerticalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panel4Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel4Layout.createSequentialGroup()
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioButton1)
                                    .addComponent(jRadioButton2))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(botaoAdicionaCausaEfeito))
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        PopulaComboCausas();
        PopulaComboEfeitos();

        tabelaCausasCompostas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id_Causa", "Id_CausaComposta", "Id_Efeito", "Tipo_Relacionamento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaCausasCompostas.setEnabled(false);
        jScrollPane13.setViewportView(tabelaCausasCompostas);

        javax.swing.GroupLayout painelGrafoRelCausaEfeitoLayout = new javax.swing.GroupLayout(painelGrafoRelCausaEfeito);
        painelGrafoRelCausaEfeito.setLayout(painelGrafoRelCausaEfeitoLayout);
        painelGrafoRelCausaEfeitoLayout.setHorizontalGroup(
            painelGrafoRelCausaEfeitoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoRelCausaEfeitoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelGrafoRelCausaEfeitoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelGrafoRelCausaEfeitoLayout.setVerticalGroup(
            painelGrafoRelCausaEfeitoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoRelCausaEfeitoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        abasGrafo.addTab("Causas -> efeitos", painelGrafoRelCausaEfeito);

        panel5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        botaoAdicionaRestricao.setText("Adicionar Restrição");
        botaoAdicionaRestricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionaRestricaoActionPerformed(evt);
            }
        });

        jLabel28.setText("Restrição (Causa)");

        jLabel33.setText("Consequência");

        comboRestricoesCausa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Selecione>", "E", "I", "O", "R" }));
        comboRestricoesCausa.setEnabled(false);
        comboRestricoesCausa.setName("cboEntradas");
        comboRestricoesCausa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboRestricaoCausaState(evt);
            }
        });

        jButton2.setText(">>");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane9.setViewportView(jList4);

        grupoRestricaoConsequencia.add(jRadioButton9);
        jRadioButton9.setText("True");
        jRadioButton9.setEnabled(false);

        grupoRestricaoConsequencia.add(jRadioButton10);
        jRadioButton10.setSelected(true);
        jRadioButton10.setText("False");
        jRadioButton10.setEnabled(false);

        jScrollPane8.setViewportView(jList3);

        jLabel32.setText("Causas ou Efeitos");

        comboRestricoesCausaOuEfeito.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Selecione>", "Causa", "Efeito" }));
        comboRestricoesCausaOuEfeito.setName("cboEntradas");
        comboRestricoesCausaOuEfeito.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboRestricoesCausaOuEfeitoItemStateChanged(evt);
            }
        });

        comboRestricoesEfeitos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Selecione>", "M" }));
        comboRestricoesEfeitos.setEnabled(false);
        comboRestricoesEfeitos.setName("cboEntradas");
        comboRestricoesEfeitos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboRestricaoEfeitoState(evt);
            }
        });

        jLabel34.setText("Restrição (Efeito)");

        jButton6.setText("<<");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel5Layout = new javax.swing.GroupLayout(panel5);
        panel5.setLayout(panel5Layout);
        panel5Layout.setHorizontalGroup(
            panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel5Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboRestricoesCausaOuEfeito, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(85, 85, 85)
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboRestricoesCausa, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel5Layout.createSequentialGroup()
                                .addComponent(comboRestricoesEfeitos, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79)
                                .addComponent(botaoAdicionaRestricao, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panel5Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel5Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel33))
                            .addGroup(panel5Layout.createSequentialGroup()
                                .addComponent(jRadioButton9)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton10))
                            .addGroup(panel5Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton6))))
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        panel5Layout.setVerticalGroup(
            panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel5Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(jLabel25))
            .addGroup(panel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboRestricoesCausaOuEfeito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboRestricoesCausa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboRestricoesEfeitos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoAdicionaRestricao)))
                .addGap(18, 18, 18)
                .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel5Layout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addGap(12, 12, 12)
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton9)
                            .addComponent(jRadioButton10))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addContainerGap())))
        );

        tabelaRestricoesCausa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id Causa", "Restricao", "Grupo", "Consequência"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaRestricoesCausa.setEnabled(false);
        jScrollPane15.setViewportView(tabelaRestricoesCausa);

        tabelaRestricoesEfeito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id Efeito", "Restricao", "Grupo", "Consequência"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaRestricoesEfeito.setEnabled(false);
        jScrollPane16.setViewportView(tabelaRestricoesEfeito);

        jLabel7.setText("Restrições de Causa");

        jLabel11.setText("Restrições de Efeito");

        javax.swing.GroupLayout painelGrafoRestricoesLayout = new javax.swing.GroupLayout(painelGrafoRestricoes);
        painelGrafoRestricoes.setLayout(painelGrafoRestricoesLayout);
        painelGrafoRestricoesLayout.setHorizontalGroup(
            painelGrafoRestricoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoRestricoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelGrafoRestricoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelGrafoRestricoesLayout.createSequentialGroup()
                        .addGroup(painelGrafoRestricoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelGrafoRestricoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelGrafoRestricoesLayout.setVerticalGroup(
            painelGrafoRestricoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoRestricoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(painelGrafoRestricoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelGrafoRestricoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        abasGrafo.addTab("Restrições", painelGrafoRestricoes);

        jLabel15.setText("Efeitos");

        jLabel14.setText("Causas");

        tbDecisaoCausa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tbDecisaoCausa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbDecisaoCausa.setName("tbCausas_Decisao");
        jScrollPane6.setViewportView(tbDecisaoCausa);

        tbDecisaoEfeito.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tbDecisaoEfeito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbDecisaoEfeito.setName("tbCausas_Decisao");
        jScrollPane7.setViewportView(tbDecisaoEfeito);

        jLabel16.setText("Efeitos");

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                    .addComponent(jScrollPane7))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout painelGrafoTabelaLayout = new javax.swing.GroupLayout(painelGrafoTabela);
        painelGrafoTabela.setLayout(painelGrafoTabelaLayout);
        painelGrafoTabelaLayout.setHorizontalGroup(
            painelGrafoTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoTabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(617, 617, 617)
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelGrafoTabelaLayout.setVerticalGroup(
            painelGrafoTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGrafoTabelaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelGrafoTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelGrafoTabelaLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(311, 311, 311))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelGrafoTabelaLayout.createSequentialGroup()
                        .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185))))
        );

        abasGrafo.addTab("Tabela de decisão", painelGrafoTabela);

        javax.swing.GroupLayout panelGrafoLayout = new javax.swing.GroupLayout(panelGrafo);
        panelGrafo.setLayout(panelGrafoLayout);
        panelGrafoLayout.setHorizontalGroup(
            panelGrafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abasGrafo, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
        );
        panelGrafoLayout.setVerticalGroup(
            panelGrafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGrafoLayout.createSequentialGroup()
                .addComponent(abasGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        abasGrafo.getAccessibleContext().setAccessibleName("Causas e Efeitos");

        jTabbedPane1.addTab("Grafo Causa Efeito", panelGrafo);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jMenuProjeto.setText("Projeto");

        jMenuItemNovo.setIcon(UIManager.getIcon("FileView.fileIcon"));
        jMenuItemNovo.setText("Novo");
        jMenuItemNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNovoActionPerformed(evt);
            }
        });
        jMenuProjeto.add(jMenuItemNovo);

        jMenuItemAbrirProjeto.setIcon(UIManager.getIcon("Tree.openIcon"));
        jMenuItemAbrirProjeto.setText("Abrir");
        jMenuItemAbrirProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirProjetoActionPerformed(evt);
            }
        });
        jMenuProjeto.add(jMenuItemAbrirProjeto);

        jMenuBar1.add(jMenuProjeto);
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-854)/2, (screenSize.height-592)/2, 854, 592);
    }// </editor-fold>//GEN-END:initComponents
    
    /** 
     * Invoca o método responsável por limpar os componentes relacionados às saidas
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        LimparCamposTabSaidas();
    }
    
    /**
     * Invoca o método responsável por popular a listagem de entradsa cadstradsa
     * @param jComboBox4 
     */
    public void setjComboBox4(JComboBox jComboBox4) {
        PopulaComboEntradas();
    }

    /**
     * Método responsável por adicionar uma nova causa composta no banco de dados 
     * @param evt 
     */
    private void botaoAdicionaCausaCompostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionaCausaCompostaActionPerformed

        try {
            Integer result = 0;
            CausaComposta cc1;
            
            String id = jComboBox16.getSelectedItem().toString();
            String[] id_causa = id.split(" ");
            
            String id2 = jComboBox18.getSelectedItem().toString();
            String[] id_causa2 = id2.split(" ");
            
            String TipoRel = "";
            
            if(jRadioButton7.isSelected()){
                TipoRel = TipoRelacionamento.OR.toString();
            }
            else if (jRadioButton8.isSelected()){                
                TipoRel = TipoRelacionamento.AND.toString();    
            }
            else 
                JOptionPane.showMessageDialog(null, "Escolha um tipo de relacionamento entre as causas ou causas compostas.");
             
            
            String Rel = "";
            
            if(jRadioButton3.isSelected()){
                Rel = TipoRelacionamento.IDENTIDADE.toString();
            }
            else if (jRadioButton4.isSelected()){                
                Rel = TipoRelacionamento.NOT.toString();    
            }
            else 
                JOptionPane.showMessageDialog(null, "Escolha uma relação para a primeira causa (ou causa composta).");
                      
            
            String Rel2 = "";
            
            if(jRadioButton5.isSelected()){
                Rel2 = TipoRelacionamento.IDENTIDADE.toString();
            }
            else if (jRadioButton6.isSelected()){                
                Rel2 = TipoRelacionamento.NOT.toString();    
            }
            else 
                JOptionPane.showMessageDialog(null, "Escolha ma relação para a segunda causa (ou causa composta).");
            
            
            
            if ((!TipoRel.equals("")) && (!Rel.equals("")) && (!Rel2.equals(""))){

                if((id_causa[2].equals("Causa:")) && (id_causa2[2].equals("Causa:"))){

                    cc1 = new CausaComposta(Integer.parseInt(id_causa[0]), 
                                            Integer.parseInt(id_causa2[0]), 0, 0, 
                                            TipoRel, Rel, Rel2, controleInterface.getProjeto_aberto().getId());
                    result = cc1.save();

                }
                else if((id_causa[2].equals("Causa:")) && (id_causa2[2].equals("Causa_Composta:"))){

                    cc1 = new CausaComposta(Integer.parseInt(id_causa[0]), 0, 0, 
                                            Integer.parseInt(id_causa2[0]), TipoRel, Rel, Rel2, controleInterface.getProjeto_aberto().getId());
                    result = cc1.save();
                }

                else if((id_causa[2].equals("Causa_Composta:")) && (id_causa2[2].equals("Causa:"))){

                    cc1 = new CausaComposta(0, 
                                            Integer.parseInt(id_causa2[0]), 
                                            Integer.parseInt(id_causa[0]), 
                                            0, TipoRel, Rel, Rel2, controleInterface.getProjeto_aberto().getId());
                    result = cc1.save();

                }
                else if((id_causa[2].equals("Causa_Composta:")) && (id_causa2[2].equals("Causa_Composta:"))){

                    cc1 = new CausaComposta(0, 0, 
                                            Integer.parseInt(id_causa[0]), 
                                            Integer.parseInt(id_causa2[0]), 
                                            TipoRel, Rel, Rel2, controleInterface.getProjeto_aberto().getId());
                    result = cc1.save();
                }
                
                PreencheTabelaCausaComposta();
                mostraJanelaGrafo();         
                
                /*if (result>0){
                    JOptionPane.showMessageDialog(null, "Adicionado com sucesso."); 
                }*/

                //Refresh
                PopulaComboCausas1();
                PopulaComboCausas2();

                //limpar
                limpar();
            }
        } catch (Exception e) {
            e.printStackTrace();            
        }
        
    }//GEN-LAST:event_botaoAdicionaCausaCompostaActionPerformed

    /**
     * Este evento é responsável por cadastrar as causas e os efeitos adicionados pelo usuário na aba Grafos e efeitos
     * @param evt 
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            Integer result = 0;
            
            if (comboSaidasGrafo.getSelectedIndex() > 0) {//Salva na tabela de Efeito
                 Efeito x = new Efeito(comboSaidasGrafo.getSelectedIndex(), campoDescricaoSaida.getText().toString(), controleInterface.getProjeto_aberto().getId());
                 result = x.save();
            } 
             
            if (comboEntradasGrafo.getSelectedIndex() > 0) {//Salva na tabela de Causa                 
                Causa x = new Causa(comboEntradasGrafo.getSelectedIndex(), campoDescricaoEntrada.getText().toString(), campoValorEntrada.getText(), controleInterface.getProjeto_aberto().getId());
                result = x.save();
            }

            //REFRESH NA tbCausasEfeitos
            PreencheTabela();
            mostraJanelaGrafo();
                               
            //limpar
            limpar();
            
        } catch (Exception e) {
            e.printStackTrace();            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * Método responsável por limpar os componentes da interface de Grafo Causa-Efeito
     */
    private void limpar(){
        
        modelo1.clear();
        jList3.removeAll();
        comboRestricoesCausa.setSelectedIndex(0);
        campoValorEntrada.setText(null);
        campoDescricaoEntrada.setText(null);
        campoDescricaoSaida.setText(null);
        comboEntradasGrafo.setSelectedIndex(0);
        comboSaidasGrafo.setSelectedIndex(0); 
        jComboBox12.setSelectedIndex(0);         
        jComboBox8.setSelectedIndex(0); 
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        jRadioButton7.setSelected(false);
        jRadioButton8.setSelected(false);
        jComboBox16.setSelectedIndex(0);        
        jComboBox18.setSelectedIndex(0);
        
    }

    /**
     * Preenche os combos de classes válidas/inválidas de acordo com o tipo da variável de entrada escolhido (inteiro, real ou string) 
     * @param itens Model contendo as restrições válidas ou inválidas
     * @param lista JList que deve receber os componentes definidos em itens
     * @param variavelEntrada Valor especificado pelo usuário no campo de texto tfVariavelEntrada
     * @param valor Valor especificado pelo usuário ao escolher uma das restrições na aba "Domínio de Entrada"
     * @param restricao Restrição especificada pelo usuário no combobox cbClasseValida ou cbClasseInvalida
     */
    private TipoRestricao preencherListaRestricoes(DefaultListModel itens, JList lista, String variavelEntrada, String valor, String restricao){
        String conteudo = null;
        String[] temp = null;
        TipoRestricao r;
        
        if (restricao.equals(TipoRestricao.DIFERENCA.getDescricao())){
            conteudo = restricao + ": " + variavelEntrada + " <> " + valor;  
             r = TipoRestricao.DIFERENCA;
        } else{
            if (restricao.equals(TipoRestricao.IGUALDADE.getDescricao())){
                conteudo = restricao + ": " + variavelEntrada + " = " + valor;
                r = TipoRestricao.IGUALDADE;
            } else{
                if (restricao.equals(TipoRestricao.INTERVALO.getDescricao())){
                    temp = valor.split(",");
                    conteudo = restricao + ": " + temp[0] + " <= " + variavelEntrada + " <= " + temp[1];
                    r = TipoRestricao.INTERVALO;
                } else{
                    if (restricao.equals(TipoRestricao.NOT_IN.getDescricao())){
                        conteudo = restricao + ": " + variavelEntrada + " \u2209 " + valor;
                        r = TipoRestricao.NOT_IN;
                    } else{
                        if (restricao.equals(TipoRestricao.IN.getDescricao())){
                            conteudo = restricao + ": " + variavelEntrada + " \u2208 " + valor;
                            r = TipoRestricao.IN;
                        } else{
                            if (restricao.equals(TipoRestricao.VALOR_MAXIMO.getDescricao())){
                                conteudo = restricao + ": " + variavelEntrada + " <= " + valor;
                                r = TipoRestricao.VALOR_MAXIMO;
                            } else{
                                conteudo = restricao + ": " + variavelEntrada + " >= " + valor;
                                r = TipoRestricao.VALOR_MINIMO;
                            }
                        }
                    }
                }                
            }            
        }
        
        itens.addElement(conteudo);
        lista.setModel(itens);
        return r;
    }
    
    /**
     * Atualiza tabela de dados de teste da aba Análise do Valor Limite: nº de colunas = nº de entradas 
     */
    private void panelValorLimiteUpdate() {  
        if (controleInterface.getProjeto_aberto() != null) {
             String coluna[] = new String [controleInterface.getProjeto_aberto().getEntradas().size() + 1];
             for(int i=0; i < controleInterface.getProjeto_aberto().getEntradas().size()+1; i++) {
                if(i==0)
                    coluna[i] = "Id Dado Teste";
                else 
                    coluna[i] = controleInterface.getProjeto_aberto().getEntrada(i-1).getNome().toString();   
             }
             DefaultTableModel modelo = new DefaultTableModel(coluna, 1);
             tbValorLimite.setModel(modelo);
            
        }
    }
    
    /**
     * Atualiza tabela de casos de teste da aba Análise do Valor Limite: nº de colunas = nº de entradas 
     */
    private void panelValorLimiteCasos(){
        if (controleInterface.getProjeto_aberto() != null) {      
             String coluna2[] = new String [controleInterface.getProjeto_aberto().getEntradas().size() + 1];
             for(int j=0; j < controleInterface.getProjeto_aberto().getEntradas().size(); j++) {
                 coluna2[j] = controleInterface.getProjeto_aberto().getEntrada(j).getNome().toString();
             }
             coluna2[controleInterface.getProjeto_aberto().getEntradas().size()] = "Saída";
             DefaultTableModel modelo2 = new DefaultTableModel(coluna2, 1);
             tbCasosLimite.setModel(modelo2);
        }
    }
    
    /**
     * Atualiza tabela de dados de teste da aba Particionamento em Classes: nº de colunas = nº de entradas 
     */
    private void panelParticionamentoUpdate() {  
        if (controleInterface.getProjeto_aberto() != null) {
             String coluna[] = new String [controleInterface.getProjeto_aberto().getEntradas().size()+1];
             for(int i=0; i < controleInterface.getProjeto_aberto().getEntradas().size()+1; i++) {
                 if(i==0)
                    coluna[i] = "Id Dado Teste";
                else
                    coluna[i] = controleInterface.getProjeto_aberto().getEntrada(i-1).getNome().toString();
             }
             DefaultTableModel modelo = new DefaultTableModel(coluna, 1);
             tbPartClasses.setModel(modelo);
        }
    }
    
    /**
     * Atualiza tabela de casos de teste da aba Particionamento em Classes: nº de colunas = nº de entradas 
     */
    private void panelParticionamentoCasos() {
        if (controleInterface.getProjeto_aberto() != null) {
             String coluna2[] = new String [controleInterface.getProjeto_aberto().getEntradas().size() + 1];
             for(int j=0; j < controleInterface.getProjeto_aberto().getEntradas().size(); j++) {
                 coluna2[j] = controleInterface.getProjeto_aberto().getEntrada(j).getNome().toString();
             }
             coluna2[controleInterface.getProjeto_aberto().getEntradas().size()] = "Saída";
             DefaultTableModel modelo2 = new DefaultTableModel(coluna2, 1);
             tbCasosParticionamento.setModel(modelo2);
        }
    }    
    
    /**
     * Adiciona uma nova restrição à lista de restrições (jListClasseValida ou jListClasseinvalida)
     * @param e Referência para um objeto do tipo Entrada
     * @param variavelEntrada Valor especificado pelo usuário no campo de texto tfVariavelEntrada
     * @param tipo Tipo da variável de entrada (inteiro, real ou string)
     * @param valor Valor especificado pelo usuário ao escolher uma das restrições na aba "Domínio de Entrada"
     * @param restricao Restrição especificada pelo usuário no combobox cbClasseValida ou cbClasseInvalida
     * @param classeValida Identifica se a restrição enviada é válida ou inválida
     */    
    private void adicionarRestricaoArraylist(Entrada e, String variavelEntrada, TipoEntrada tipo, String valor, String restricao, boolean classeValida){
        Restricao r = new Restricao();
        r.setConteudo(valor);        
        
        if (classeValida){
            r.setClasse("valida");
            r.setTipo( preencherListaRestricoes(itensClasseValida, jListClasseValida, variavelEntrada, valor, restricao) );
            arrayListRestricoesValidas.add(r);
        } else{
            r.setClasse("invalida");
            r.setTipo( preencherListaRestricoes(itensClasseInvalida, jListClasseInvalida, variavelEntrada, valor, restricao) );
            arrayListRestricoesInvalidas.add(r);
        }
        //arrayListRestricoes.add(r);
        //e.addRestricao(r);
        e.setNome(variavelEntrada);
        e.setTipo(tipo);
    }
    
    /**
     * Cria as mensagens que serão exibidas pelos componentes JOptionPane (solicitação de informações ao usuário)
     * @param tipoVariavel Identifica se a variável selecionada no combobox cbTipoVariavelEntrada é do tipo inteiro, real ou string
     * @param itemSelecionado Valor inteiro que determina qual dos itens do combobox foi selecionado
     * @param classeValida Identifica se a restrição enviada é válida ou inválida
     */ 
    private StringBuffer[] montarMsgEntradaRestricao(int tipoVariavel, int itemSelecionado, boolean classeValida){       
        StringBuffer[] componentesMensagem = new StringBuffer[3];
        for (int i = 0; i < 3; i++){
            componentesMensagem[i] = new StringBuffer();
        }
        
        if (classeValida){
            componentesMensagem[1].append("Restrição Válida ");
        } else {
            componentesMensagem[1].append("Restrição Inválida ");
        }
        
        if ( tipoVariavel == 1 || tipoVariavel == 2){             
            switch(itemSelecionado){
                case 1:
                    componentesMensagem[0].append("Informe um valor para a Diferença");
                    componentesMensagem[1].append("para Diferença");
                    componentesMensagem[2].append(TipoRestricao.DIFERENCA.getDescricao());
                    break;
                case 2:
                    componentesMensagem[0].append("Informe um valor para a Igualdade");
                    componentesMensagem[1].append("para Igualdade");
                    componentesMensagem[2].append(TipoRestricao.IGUALDADE.getDescricao());
                    break;
                case 3:
                    componentesMensagem[0].append("Especifique o Intervalo");
                    componentesMensagem[1].append("para Intervalo");
                    componentesMensagem[2].append(TipoRestricao.INTERVALO.getDescricao());
                    break;
                case 4:
                    componentesMensagem[0].append("Informe o conjunto de valores");
                    componentesMensagem[1].append("- Não Pertence");
                    componentesMensagem[2].append(TipoRestricao.NOT_IN.getDescricao());
                    break;
                case 5:
                    componentesMensagem[0].append("Informe o conjunto de valores");
                    componentesMensagem[1].append("- Pertence");
                    componentesMensagem[2].append(TipoRestricao.IN.getDescricao());
                    break;
                case 6:
                    componentesMensagem[0].append("Informe o Valor Máximo");
                    componentesMensagem[1].append("para Valor Máximo");
                    componentesMensagem[2].append(TipoRestricao.VALOR_MAXIMO.getDescricao());
                    break;                    
                case 7:
                    componentesMensagem[0].append("Informe o Valor Mínimo");
                    componentesMensagem[1].append("para Valor Mínimo");
                    componentesMensagem[2].append(TipoRestricao.VALOR_MINIMO.getDescricao());
                    break;                    
            }            
        } else {            
            switch(itemSelecionado){
                case 1:
                    componentesMensagem[0].append("Informe um valor para a Diferença");
                    componentesMensagem[1].append("para Diferença");
                    componentesMensagem[2].append(TipoRestricao.DIFERENCA.getDescricao());
                    break;
                case 2:
                    componentesMensagem[0].append("Informe um valor para a Igualdade");
                    componentesMensagem[1].append("para Igualdade");
                    componentesMensagem[2].append(TipoRestricao.IGUALDADE.getDescricao());
                    break;
                case 3:
                    componentesMensagem[0].append("Informe o conjunto de valores");
                    componentesMensagem[1].append("- Não Pertence");
                    componentesMensagem[2].append(TipoRestricao.NOT_IN.getDescricao());
                    break;
                case 4:
                    componentesMensagem[0].append("Informe o conjunto de valores");
                    componentesMensagem[1].append("- Pertence");
                    componentesMensagem[2].append(TipoRestricao.IN.getDescricao());
                    break;
            }            
        }
        
        return componentesMensagem;        
    }    

    /**
     * Associa o número inteiro escolhido no combobox com o enum TipoEntrada
     * @param indice Indice do tipo de Entrada escolhido no combobox cbTipoVariavelEntrada
     * @return 
     */
    private TipoEntrada identificarTipoVariavel(int indice){
        if (indice == 1){
                return TipoEntrada.INTEIRO;
        } else {
            if (indice == 2){
                return TipoEntrada.REAL;
            } else { 
                return TipoEntrada.STRING;                       
            }
        }
    }    
    
    /**
     * Gerencia a escolha de um tipo de restrição válida
     * @param evt Evento de escolha de uma opção no combobox
     */
    private void cbClasseValidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClasseValidaActionPerformed
        int itemSelecionado = cbClasseValida.getSelectedIndex();
        if (itemSelecionado > 0){            
            int indiceTipoVariavel = cbTipoVariavelEntrada.getSelectedIndex();            
            String valor;        

            StringBuffer[] componentesMensagem = montarMsgEntradaRestricao(indiceTipoVariavel, itemSelecionado, true);

            valor = JOptionPane.showInputDialog(null, componentesMensagem[0].toString(), componentesMensagem[1].toString(), JOptionPane.QUESTION_MESSAGE);

            if (valor != null){
                if (!valor.trim().equals("")){
                    TipoEntrada tipoVariavel = identificarTipoVariavel(indiceTipoVariavel);
                    adicionarRestricaoArraylist(entrada, tfVariavelEntrada.getText(), tipoVariavel, valor.trim(), componentesMensagem[2].toString(), true);
                }                
            }
        }  
    }//GEN-LAST:event_cbClasseValidaActionPerformed
      
    private void jComboBox12ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox12ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox12ItemStateChanged

    private void jComboBox12PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox12PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox12PropertyChange

    /**
     * Invoca o método responsável por cadastrar a relação entre as causas e efeitos
     * @param evt 
     */
    private void botaoAdicionaCausaEfeitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionaCausaEfeitoActionPerformed
            PopulaCausaEfeito();
    }//GEN-LAST:event_botaoAdicionaCausaEfeitoActionPerformed

    /**
     * Popula todos os componentes da interface de grafos
     * @param evt 
     */
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged

        if (controleInterface.getProjeto_aberto() != null) {
            try {
                int tabSelecionada = jTabbedPane1.getSelectedIndex();
                switch(tabSelecionada){
                    case 1:
                        PreencherTabelaSaidas();
                        popupGrafo.dispose();
                        break;
                    case 2:
                        if(controleInterface.getDadosTesteAnalise().isEmpty()) {
                            panelValorLimiteUpdate();
                            panelValorLimiteCasos();   
                        } else {
                            controleInterface.obterCasosTeste(TipoCriterio.ANALISE_VALOR_LIMITE.toString());
                            atualizaTabelaValorLimite();
                        }
                        populaComboBoxSaidas(2);
                        popupGrafo.dispose();
                        break;
                    case 3:
                        if(controleInterface.getDadosTesteClasses().isEmpty()) {
                            panelParticionamentoUpdate();
                            panelParticionamentoCasos();
                        } else {
                            controleInterface.obterCasosTeste(TipoCriterio.PARTICIONAMENTO_CLASSES.toString());
                            atualizaTabelaClasses();
                        }
                        populaComboBoxSaidas(3);
                        popupGrafo.dispose();
                        break;
                    case 4:
                        mostraJanelaGrafo();
                        PreencheTabela();
                        PopulaComboEntradas();
                        PopulaComboSaidas();
                        PopulaComboCausas1();
                        PopulaComboCausas2();
                        PreencheTabelaCausaComposta();
                        PopulaComboCausas();
                        PopulaComboEfeitos();
                        PreencheTabelaCausaEfeito();
                        PreencheTabelaRestricoesCausa();
                        PreencheTabelaRestricoesEfeito();
                        break;
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                DbConn dbConn = new DbConn();
                if (!dbConn.databaseExists()) {
                    dbConn.initDb();
                }
            } catch (IOException ex) {
                        Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    /**
     * Preenche a listagem com todas as saídas já cadastradas no banco de dados
     * @param i
     * @throws ClassNotFoundException
     * @throws SQLException 
     */
    private void populaComboBoxSaidas(int i) throws ClassNotFoundException, SQLException{
        ArrayList<Saida> saidas = Saida.getByColumn("id_projeto", this.controleInterface.getProjeto_aberto().getId().toString());
        if(i==2){
            jComboBox2.removeAllItems();
            jComboBox2.addItem("Escolha a Saída");
            for(Saida s : saidas){
                jComboBox2.addItem(s.getNome());           
            }
        }
        if(i==3){
            jComboBox3.removeAllItems();
            jComboBox3.addItem("Escolha a Saída");
            for(Saida s : saidas){
                jComboBox3.addItem(s.getNome());    


            }
        }
        
    }
   
    /**
     * Disponibiliza a janela do grafo, a qual é atualizada em tempo real
     */
    private void mostraJanelaGrafo() {
        DesenhaGrafo dg = new DesenhaGrafo();
        mxGraph grafo = null;
        try {
            grafo = dg.desenhaGrafo(controleInterface.getProjeto_aberto().getId());
        } catch (Exception e) {
            e.printStackTrace();
        }

        mxGraphComponent graphComponent = new mxGraphComponent(grafo);
        
        popupGrafo.dispose();
        popupGrafo = new JFrame("Grafo Causa-Efeito");
        popupGrafo.add(graphComponent);
        popupGrafo.setSize(900, 600);
        popupGrafo.setVisible(true);
        this.toFront();
    }
    
    /**
     * author JFTtool Team
     * Preenche os combos de classes válidas/inválidas de acordo com o tipo da variável de entrada escolhido (inteiro, real ou string) 
     * @param opcao Tipo de variável de Entrada
     * @param cb Combobox especificado
     */       
    private void preencherCombobox(int opcao, JComboBox cb){
        if ( opcao == 1 || opcao == 2){
            cb.removeAllItems();
            cb.addItem("Escolha a Restrição");
            cb.addItem(TipoRestricao.DIFERENCA.getDescricao());
            cb.addItem(TipoRestricao.IGUALDADE.getDescricao());
            cb.addItem(TipoRestricao.INTERVALO.getDescricao());
            cb.addItem(TipoRestricao.NOT_IN.getDescricao());
            cb.addItem(TipoRestricao.IN.getDescricao());
            cb.addItem(TipoRestricao.VALOR_MAXIMO.getDescricao());
            cb.addItem(TipoRestricao.VALOR_MINIMO.getDescricao());             
        } else {
            cb.removeAllItems();
            cb.addItem("Escolha a Restrição");
            cb.addItem(TipoRestricao.DIFERENCA.getDescricao());
            cb.addItem(TipoRestricao.IGUALDADE.getDescricao());
            cb.addItem(TipoRestricao.NOT_IN.getDescricao());
            cb.addItem(TipoRestricao.IN.getDescricao());            
        }
    }
    
    /**
     * Gerencia o preenchimento dos combos de classes válidas/inválidas utilizando o método preencherCombobox
     * @param evt Evento de escolha de um tipo de variável no combobox cbTipoVariavelEntrada
     */    
    private void cbTipoVariavelEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoVariavelEntradaActionPerformed
        int opcao = cbTipoVariavelEntrada.getSelectedIndex();
        switch(opcao){
            case 1:               
            case 2:
                preencherCombobox(opcao, cbClasseValida);
                preencherCombobox(opcao, cbClasseInvalida);
                break;
            case 3:
                preencherCombobox(opcao, cbClasseValida);
                preencherCombobox(opcao, cbClasseInvalida);
                break;
        }        
    }//GEN-LAST:event_cbTipoVariavelEntradaActionPerformed

    private void jComboBox16ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox16ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox16ItemStateChanged

    private void jComboBox16PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox16PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox16PropertyChange

    private void jComboBox18ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox18ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox18ItemStateChanged

    private void jComboBox18PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox18PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox18PropertyChange

    /**
     * Cadastro de restrições de causas ou de efeitos, de acordo com a escolha do usuário, ao preencher os componentes
     * @param evt 
     */
    private void botaoAdicionaRestricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionaRestricaoActionPerformed
      try{
          
        if (jList3.getModel().getSize() < 2) {
            JOptionPane.showMessageDialog(null, "ERRO! Número de Causas/Efeitos incorreto");
            return;
        }
          
        Integer result = 0;
        CausaRestricao x;
        EfeitoRestricao y;
        Integer conseq = 0;
        Integer i;

        GrupoRestricao cr = new GrupoRestricao("");
        Integer grupo  = 0;
        grupo = cr.save();
                
        if(comboRestricoesCausaOuEfeito.getSelectedIndex() == 1){//causa
            i = 0;
            while (jList3.getModel().getSize()>i){
                String id = jList3.getModel().getElementAt(i).toString();
                String[] id_causaOuEfeito = id.split(" ");
                
                i++;
                
                conseq = Integer.parseInt(id_causaOuEfeito[id_causaOuEfeito.length - 1]);
                x = new CausaRestricao(Integer.parseInt(id_causaOuEfeito[0]),comboRestricoesCausa.getSelectedItem().toString(),grupo, conseq, controleInterface.getProjeto_aberto().getId());
                result = x.save();
                
            }
       
        } else if (comboRestricoesCausaOuEfeito.getSelectedIndex() == 2) {//efeito
            i = 0;
            while (jList3.getModel().getSize()>i)
            {
                String id = jList3.getModel().getElementAt(i).toString();
                String[] id_causaOuEfeito = id.split(" ");
                conseq = Integer.parseInt(id_causaOuEfeito[id_causaOuEfeito.length - 1]);
                
                i++;
                
                y = new EfeitoRestricao(Integer.parseInt(id_causaOuEfeito[0]), comboRestricoesEfeitos.getSelectedItem().toString(),grupo, conseq, controleInterface.getProjeto_aberto().getId());
                result = y.save();                
            }
        } else {
            JOptionPane.showMessageDialog(null, "ERRO! Selecione um tipo de restricão"); 
        }
        
        mostraJanelaGrafo();
        PreencheTabelaRestricoesCausa();
        PreencheTabelaRestricoesEfeito();
        
        if (result>0){
           JOptionPane.showMessageDialog(null, "Adicionado com sucesso."); 
        }
        
        limpar();
        comboRestricoesCausaOuEfeito.updateUI();
      } 
        catch (Exception e) {
            e.printStackTrace();            
        }      
    }//GEN-LAST:event_botaoAdicionaRestricaoActionPerformed

    /**
     *Na tela de cadastro de restrições de causas ou de efeitos, preenche a listagem, na qual serão visualizados os dados, a partir dos valores recuperados do banco de dados 
     */
    private void CriaLista() {
       try{
        javax.swing.DefaultListModel modeloCausa = new javax.swing.DefaultListModel();    
        if (comboRestricoesCausaOuEfeito.getSelectedIndex() == 1) {
            comboRestricoesCausa.setEnabled(true);
            comboRestricoesEfeitos.setEnabled(false);
            comboRestricoesCausa.updateUI();
            
            ArrayList<Causa> c1 = Causa.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
                
            for (int i = 0; i < c1.size(); i++) {
                Causa c = c1.get(i);
                modeloCausa.addElement(c.getId().toString() +" - " + c.getNome().toString());
            }   
            
        } else if (comboRestricoesCausaOuEfeito.getSelectedIndex() == 2){
            comboRestricoesCausa.setEnabled(false);
            comboRestricoesEfeitos.setEnabled(true);
            comboRestricoesEfeitos.updateUI();
            
            ArrayList<Efeito> c1 = Efeito.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
                
            for (int i = 0; i < c1.size(); i++) {
                Efeito c = c1.get(i);
                modeloCausa.addElement(c.getId().toString() +" - " + c.getNome().toString());
            }
        } else {
            comboRestricoesCausa.setEnabled(false);
            comboRestricoesEfeitos.setEnabled(false);
            comboRestricoesEfeitos.updateUI();
        }
                    
        jList4.setModel(modeloCausa); 
        
        }
         catch (Exception e) {
            e.printStackTrace();            
        }
    }
        
    /**
     * Validação, que não permite a seleção da mesma causa ou efeito, no cadastro de restrições de causas ou efeitos
     * @param evt 
     */   
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int MaxCount = 0;
        
        String novoId = jList4.getSelectedValue().toString().split(" ")[0];
        for(int j=0 ; j<jList3.getModel().getSize() ; j++) {
            String existId = jList3.getModel().getElementAt(j).toString().split(" ")[0];
            if (existId.equals(novoId)) {
                JOptionPane.showMessageDialog(null, "ERRO! Causa/Efeito já selecionado");
                return;
            }
        }
                
        if(comboRestricoesEfeitos.isEnabled()){//Efeito
            if (comboRestricoesEfeitos.getSelectedIndex()>0){ //Se for selecionado M
                MaxCount = 2;
            }        
        }
        else{//Causa
             if (comboRestricoesCausa.getSelectedIndex()>3){ //Se for selecionado R
                MaxCount = 2;
             }  
             else if((comboRestricoesCausa.getSelectedIndex()>0) && (comboRestricoesCausa.getSelectedIndex()<=3)){
                 MaxCount = 3; //somente para permitir que sejam adicionados mais de 2
             }
        }
        
        String data = "";
        if (jRadioButton9.isSelected()) {
            data = jList4.getSelectedValue().toString() + " 1";
        } else {
            data = jList4.getSelectedValue().toString() + " 0";
        }
                
        
        if ((jRadioButton9.isSelected()) || (jRadioButton10.isSelected())){
            if ((MaxCount>1) && (MaxCount<3)){
               if (jList3.getModel().getSize() < MaxCount){
                    modelo1.addElement(data);            
                    jList3.setModel(modelo1); 
                } 
            }
            else if (MaxCount>2) {
                    modelo1.addElement(data);            
                    jList3.setModel(modelo1);                  
            }
            else
               JOptionPane.showMessageDialog(null, "Selecione a quantidade de Causas/Efeitos correta."); 
                
                     
        }            
        else
            JOptionPane.showMessageDialog(null, "Escolha uma consequência entre verdadeira ou falsa.");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * De acordo com a seleção do usuário, entre cadastro de restrição de causa ou efeito, preenche a listagem com valores corretos e libera a listagem relacionada
     * @param evt 
     */
    private void comboRestricoesCausaOuEfeitoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboRestricoesCausaOuEfeitoItemStateChanged
           CriaLista();
           jRadioButton10.setSelected(true);
           jRadioButton10.setEnabled(false);
           jRadioButton9.setEnabled(false);               
           comboRestricoesEfeitos.setSelectedIndex(0);
           comboRestricoesCausa.setSelectedIndex(0);
           modelo1.removeAllElements();
    }//GEN-LAST:event_comboRestricoesCausaOuEfeitoItemStateChanged

    /**
     * Remove os valores escolhidos pelo usuário, da listagem de causas ou efeitos nos quais serão adicionadas restrições
     * @param evt 
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            modelo1.remove(jList3.getSelectedIndex());        
        }
        catch(Exception e) {
            e.printStackTrace();            
        } 
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * Controle responsável por atualizar os valores na interface, as medida que são cadastrados
     * @param evt 
     */
    private void trocaEstadoAbasGrafo(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_trocaEstadoAbasGrafo
        if (controleInterface.getProjeto_aberto() != null) {
            int tabSelecionada = abasGrafo.getSelectedIndex();
            switch(tabSelecionada){
                case 0:
                    PreencheTabela();
                    PopulaComboEntradas();
                    PopulaComboSaidas();
                    break;
                case 1:
                    PopulaComboCausas1();
                    PopulaComboCausas2();
                    PreencheTabelaCausaComposta();
                    break;
                case 2:
                    PopulaComboCausas();
                    PopulaComboEfeitos();
                    PreencheTabelaCausaEfeito();
                    break;
                case 3:
                    PreencheTabelaRestricoesCausa();
                    PreencheTabelaRestricoesEfeito();
                    break;
                case 4:
                    controleInterface.atualizaTabelaDecisao(tbDecisaoCausa, tbDecisaoEfeito);
                    break;                                           
            }
        }
    }//GEN-LAST:event_trocaEstadoAbasGrafo

    private void nomePadraoSaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomePadraoSaidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomePadraoSaidaActionPerformed

     /**
     * Gerencia a escolha de um tipo de restrição inválida
     * @param evt Evento de escolha de uma opção no combobox
     */
    private void cbClasseInvalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClasseInvalidaActionPerformed
       int itemSelecionado = cbClasseInvalida.getSelectedIndex();
        if (itemSelecionado > 0){            
            int indiceTipoVariavel = cbTipoVariavelEntrada.getSelectedIndex();                        
            String valor;        

            StringBuffer[] componentesMensagem = montarMsgEntradaRestricao(indiceTipoVariavel, itemSelecionado, false);

            valor = JOptionPane.showInputDialog(null, componentesMensagem[0].toString(), componentesMensagem[1].toString(), JOptionPane.QUESTION_MESSAGE);

            if (valor != null){
                if (!valor.trim().equals("")){
                    TipoEntrada tipoVariavel = identificarTipoVariavel(indiceTipoVariavel);                    
                    adicionarRestricaoArraylist(entrada, tfVariavelEntrada.getText(), tipoVariavel, valor.trim(), componentesMensagem[2].toString(), false);
                }               
            } 
        }
    }//GEN-LAST:event_cbClasseInvalidaActionPerformed
    
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed

   }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed

   }//GEN-LAST:event_jRadioButton1ActionPerformed

    /**
     * Na aba de restrição, a partir da escolha do usuário entre as possíveis opções de restrição de causa, habilita os próximos componentes necessarios
     * @param evt 
     */
    private void comboRestricaoCausaState(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboRestricaoCausaState
        switch (comboRestricoesCausa.getSelectedIndex()) {
            case 4:
                jRadioButton10.setEnabled(true);
                jRadioButton9.setEnabled(true);
                jRadioButton10.setSelected(true);
                break;
            default:
                jRadioButton10.setSelected(true);
                jRadioButton10.setEnabled(false);
                jRadioButton9.setEnabled(false);               
        }
        comboRestricoesEfeitos.setSelectedIndex(0);
        modelo1.removeAllElements();
        comboRestricoesCausa.updateUI();
    }//GEN-LAST:event_comboRestricaoCausaState

    /**
     * Na aba de restrição, a partir da escolha do usuário entre as possíveis opções de restrição de efeito, habilita os próximos componentes necessarios para o cadastro das restrições de efeitos
     * @param evt 
     */
    private void comboRestricaoEfeitoState(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboRestricaoEfeitoState
        switch (comboRestricoesEfeitos.getSelectedIndex()) {
            case 1:
                jRadioButton10.setEnabled(true);
                jRadioButton9.setEnabled(true);
                jRadioButton10.setSelected(true);
                break;
            default:
                jRadioButton10.setSelected(true);
                jRadioButton10.setEnabled(false);
                jRadioButton9.setEnabled(false);
        }
        comboRestricoesCausa.setSelectedIndex(0);
        modelo1.removeAllElements();
        comboRestricoesEfeitos.updateUI();
    }//GEN-LAST:event_comboRestricaoEfeitoState

    
    private void jMenuItemNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNovoActionPerformed
        // TODO add your handling code here:
        StringBuffer[] msg = new StringBuffer[3];
        for(int i=0; i<3; i++) {
            msg[i] = new StringBuffer();
        }
        msg[0].append("Nome");
        msg[1].append("Novo Projeto");
        msg[2].append("Projeto");
        
        String projectName = JOptionPane.showInputDialog(null, msg[0].toString(), msg[1].toString(), JOptionPane.QUESTION_MESSAGE);
        
        if ((projectName != null) && !((projectName.trim()).equals(""))) {
            controleInterface.newProjeto_aberto(projectName);
            jTabbedPane1.setEnabled(true);
            for (int i=0; i < jPanel1.getComponents().length; i++) {
                jPanel1.getComponent(i).setEnabled(true);
            }
            for (int i=0; i < jPanel2.getComponents().length; i++) {
                jPanel2.getComponent(i).setEnabled(true);
            }
            for (int i=0; i < jPanel4.getComponents().length; i++) {
                jPanel4.getComponent(i).setEnabled(true);
            }
            jTabbedPane1StateChanged(null);
        }
    }//GEN-LAST:event_jMenuItemNovoActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Adiciona nova saída
        String valid = "válida";
        if(jComboBox1.getSelectedIndex()==1)
            valid="inválida";
        Saida s = new Saida(controleInterface.getProjeto_aberto().getId(), nomePadraoSaida.getText(), conteudoDaSaida.getText() , valid);
        try {
            s.save();
        } catch (SQLException ex) {
            Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        PreencherTabelaSaidas();
        
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jMenuItemAbrirProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirProjetoActionPerformed
        
        DialogAbrirProjeto dialog = new DialogAbrirProjeto(this, true);
        dialog.setLocationRelativeTo(null);
        Projeto p = dialog.showDialog();
        
        if (p != null) {
            controleInterface.setProjeto_aberto(p);
            try {
                p.setEntradas(Entrada.getByColumn("id_projeto", p.getId().toString()));
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            adicionarEntradaJTable(); //Add por Edilson

            jTabbedPane1.setEnabled(true);
            for (int i=0; i < jPanel1.getComponents().length; i++) {
                jPanel1.getComponent(i).setEnabled(true);
            }
            for (int i=0; i < jPanel2.getComponents().length; i++) {
                jPanel2.getComponent(i).setEnabled(true);
            }
            for (int i=0; i < jPanel4.getComponents().length; i++) {
                jPanel4.getComponent(i).setEnabled(true);
            }

            jTabbedPane1StateChanged(null);
        }
    }//GEN-LAST:event_jMenuItemAbrirProjetoActionPerformed

    private String montaStringRestricao(TipoRestricao tipo, String valor, String variavelEntrada){    
        String conteudo = null;
        String[] temp = null;
        if (tipo == TipoRestricao.DIFERENCA){
            conteudo = variavelEntrada + " <> " + valor;             
        } else{
            if (tipo == TipoRestricao.IGUALDADE){
                conteudo = variavelEntrada + " = " + valor;
            } else{
                if (tipo == TipoRestricao.INTERVALO){
                    temp = valor.split(",");
                    conteudo = temp[0] + " <= " + variavelEntrada + " <= " + temp[1];                    
                } else{
                    if (tipo == TipoRestricao.NOT_IN){
                        conteudo = variavelEntrada + " \u2209 " + valor;                       
                    } else{
                        if (tipo == TipoRestricao.IN){
                            conteudo = variavelEntrada + " \u2208 " + valor;                            
                        } else{
                            if (tipo == TipoRestricao.VALOR_MAXIMO){
                                conteudo = variavelEntrada + " <= " + valor;                                
                            } else{
                                conteudo = variavelEntrada + " >= " + valor;                                
                            }
                        }
                    }
                }                
            }            
        }
        return conteudo;
    }    
        
    private String retornaRestricaoArrayList(ArrayList<Restricao> r, String classeRestricao, String nomeVariavelEntrada){
        String valor = "-";
        for(int i = 0; i < r.size(); i++){
            Restricao elemento = r.get(i);
            if (elemento.getClasse().equals(classeRestricao)){
                valor = montaStringRestricao(elemento.getTipo(), elemento.getConteudo(), nomeVariavelEntrada);
                r.remove(i);
                break;
            }
        }        
        return valor; 
    }                                                           
    
    /**
     * Controla o JTable jTableEntradas, que fica na aba Domínio de Entradas
     */
    public void adicionarEntradaJTable(){
        try{                        
            int tamanho = 0;
            int tamanhoAtual = 0;
            int temp = 0;

            ArrayList<Entrada> entrada = Entrada.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
            
            String[] colunas = new String []{"Nome", "Tipo", "Classe Válida", "Classe Inválida"};
            String c[][] = null;

            for (int i=0; i < entrada.size(); i++) {                        
                ArrayList<Restricao> restricoes = Restricao.getByColumn("id_entrada", entrada.get(i).getId().toString());                                             
                c = new String[(restricoes.size())][4];
                tamanho = restricoes.size();
                for (int j = 0; j < tamanho; j++) {
                    c[j][0] = entrada.get(i).getNome();
                    c[j][1] = entrada.get(i).getTipo().toString();
                    c[j][2] = retornaRestricaoArrayList(restricoes, "valida", entrada.get(i).getNome());
                    c[j][3] = retornaRestricaoArrayList(restricoes, "invalida", entrada.get(i).getNome());
                    if (dadosJTableEntrada != null){                                                
                        temp++;
                        dadosJTableEntrada.addRow(new Object[]{c[j][0],c[j][1],c[j][2],c[j][3]});                         
                    } 
                    if (restricoes.size() == 0){
                        j = tamanho;
                    }
                }
            }
            if (dadosJTableEntrada == null){
                dadosJTableEntrada = new DefaultTableModel(c, colunas);
                jTableEntradas.setModel(dadosJTableEntrada);
            } else{
                tamanhoAtual = dadosJTableEntrada.getRowCount();
                temp = tamanhoAtual - temp;
                for (int w = 0; w < temp; w++){
                    dadosJTableEntrada.removeRow(0);
                }
            }           
            
        } catch(Exception e){
            e.printStackTrace();
        }
    }         
    
    /**
     * Adiciona entrada com os dados fornecidos no formulário da aba Domínio de Entrada e limpa form
     * @param evt 
     * @see LimparEntrada()
     */
    private void btnAdicionarEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarEntradaActionPerformed
        try{
            for (int i = 0; i < arrayListRestricoesValidas.size(); i++){
                Restricao r;
                r = arrayListRestricoesValidas.get(i);
                entrada.addRestricao(r);
            }
            for (int i = 0; i < arrayListRestricoesInvalidas.size(); i++){
                Restricao r;
                r = arrayListRestricoesInvalidas.get(i);
                entrada.addRestricao(r);
            }            
            controleInterface.addEntrada(entrada);
            entrada = new Entrada();
            arrayListRestricoesValidas = new ArrayList<Restricao>();
            arrayListRestricoesInvalidas = new ArrayList<Restricao>();
        } catch(Exception e) {
            e.printStackTrace();            
        }
        adicionarEntradaJTable();
        LimparEntrada();
    }//GEN-LAST:event_btnAdicionarEntradaActionPerformed
    
    /**
     * Invoca geração de dados de teste e atualiza tabela de dados de teste
     * @param evt 
     * @see atualizaTabelaClasses()
     */
    private void btDadosPTClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDadosPTClassesActionPerformed
        // TODO add your handling code here:
        if(controleInterface.getProjeto_aberto().getEntradas().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Insira variáveis de entrada no Projeto!");
        } else {
          try {
            //Invoca método para geração de dados de teste Particionamento em Classes
            controleInterface.gerarDadosTesteClasses();
          } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
          }
          atualizaTabelaClasses();
        }
    }//GEN-LAST:event_btDadosPTClassesActionPerformed
     
    /**
     * Atualiza tabela com os dados de teste na aba Particionamento em Classes
     */   
    private void atualizaTabelaClasses() {
        //preencher a tabela com os dados de teste
          String colunas[] = new String[controleInterface.getProjeto_aberto().getEntradas().size()+1];
          //cada coluna deve ser uma variável de entrada
          for(int j = 0; j < controleInterface.getProjeto_aberto().getEntradas().size()+1; j++) {
              if(j == 0)
                  colunas[j] = "Id Dado_Teste";
              else
                  colunas[j] = controleInterface.getProjeto_aberto().getEntradas().get(j-1).getNome().toString();
          }
          DefaultTableModel modelo = new DefaultTableModel();
          modelo.setColumnIdentifiers(colunas);
          //Insere cada Dado de Teste na Tabela
          for(int i = 0; i < controleInterface.getDadosTesteClasses().size(); i++){
            String linha[] = new String[controleInterface.getProjeto_aberto().getEntradas().size()+1];
            //Cada dado de entrada em um célula
            for(int k = 0; k < controleInterface.getProjeto_aberto().getEntradas().size()+1; k++) {
                if(k==0)
                    linha[k] = controleInterface.getDadosTesteClasses().get(i).getId().toString();
                else
                    linha[k] = controleInterface.getDadosTesteClasses().get(i).getDadoEntrada(k-1).getValor().toString();
            }
            modelo.addRow(linha);
          }
          tbPartClasses.setModel(modelo);
    }
    
    /**
     * Invoca a geração dos dados de teste e atualiza tabela de dados de teste
     * @param evt 
     * @see atualizaTabelaValorLimite()
     */
    private void btDadosAnVlLimiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDadosAnVlLimiteActionPerformed
        // TODO add your handling code here:
        if(controleInterface.getProjeto_aberto().getEntradas().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Insira variáveis de entrada no Projeto!");
        } else {
          try {
            //Invoca método para geração de dados de teste Particionamento em Classes
            controleInterface.gerarDadosTesteValorLimite();
          } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
          }
          atualizaTabelaValorLimite();
        }
    }//GEN-LAST:event_btDadosAnVlLimiteActionPerformed

    /**
     * Atualiza a tabela com os dados de teste na aba Análise do Valor Limite
     */
    private void atualizaTabelaValorLimite() {
          //preencher a tabela com os dados de teste
          String colunas[] = new String[controleInterface.getProjeto_aberto().getEntradas().size()+1];
          //cada coluna deve ser uma variável de entrada
          for(int j = 0; j < controleInterface.getProjeto_aberto().getEntradas().size()+1; j++) {
            if(j == 0)
                colunas[j] = "Id Dado_Teste";
            else
                colunas[j] = controleInterface.getProjeto_aberto().getEntradas().get(j-1).getNome().toString();
          }
          DefaultTableModel modelo = new DefaultTableModel();
          modelo.setColumnIdentifiers(colunas);
          //Insere cada Dado de Teste na Tabela
          for(int i = 0; i < controleInterface.getDadosTesteAnalise().size(); i++){
            String linha[] = new String[controleInterface.getProjeto_aberto().getEntradas().size()+1];
            //Cada dado de entrada em um célula
            for(int k = 0; k < controleInterface.getProjeto_aberto().getEntradas().size()+1; k++) {
                if(k==0)
                    linha[k] = controleInterface.getDadosTesteAnalise().get(i).getId().toString();
                else 
                    linha[k] = controleInterface.getDadosTesteAnalise().get(i).getDadoEntrada(k-1).getValor().toString();
                    //if(controleInterface.getDadosTesteAnalise().get(i).getDadoEntrada(k-1).getValido() == 0) 
                      //  linha[k]
                
            }
            modelo.addRow(linha);
          }
          tbValorLimite.setModel(modelo);
    }
    
    private void comboEntradasGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEntradasGrafoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboEntradasGrafoActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void btCasosTesteLimiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCasosTesteLimiteActionPerformed
        // Adiciona um caso de teste
        ArrayList<Saida> saidas;
        try {
            saidas = Saida.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
            
            for(Saida s : saidas){
                int valido=1;
                if(s.getValida().equals("inválida")){
                    valido=0;
                }
                if (s.getNome().equals(jComboBox3.getSelectedItem().toString())){
                    CasoTeste cs = new CasoTeste(s.getId(),Integer.valueOf(jTextField1.getText()), valido, controleInterface.getProjeto_aberto().getId());
                    cs.save();
                    System.out.println(cs.getId());
                }
            }
        atualizaCasosTeste(tbCasosLimite, TipoCriterio.ANALISE_VALOR_LIMITE.toString());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (SQLException ex) {
            Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_btCasosTesteLimiteActionPerformed
    
    /**
     * Invoca o método para limpar todos os campos do formulário
     * @param evt 
     * @see LimparEntrada()
     */
    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        LimparEntrada();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void removerElementosJList(ArrayList<Restricao> listaRestricoes, JList item, DefaultListModel modelo){
            int itemSelecionado = item.getSelectedIndex();
            while (itemSelecionado >= 0){                
                modelo.remove(itemSelecionado);
                listaRestricoes.remove(itemSelecionado);                
                itemSelecionado = item.getSelectedIndex();
        }       
    }
    
    private void jListClasseValidaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListClasseValidaKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_DELETE){                    
            int valor;
            valor = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir?", "Restrição Válida", JOptionPane.OK_OPTION);
            if (valor == JOptionPane.OK_OPTION){
                removerElementosJList(arrayListRestricoesValidas, jListClasseValida, itensClasseValida);            
            }        
        }
    }//GEN-LAST:event_jListClasseValidaKeyTyped

    private void jListClasseInvalidaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListClasseInvalidaKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_DELETE){                    
            int valor;
            valor = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir?", "Restrição Inválida", JOptionPane.OK_OPTION);
            if (valor == JOptionPane.OK_OPTION){
                removerElementosJList(arrayListRestricoesInvalidas, jListClasseInvalida, itensClasseInvalida);            
            }        
        }        
    }//GEN-LAST:event_jListClasseInvalidaKeyTyped

    private void btCasosTesteClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCasosTesteClassesActionPerformed
        // Adiciona um caso de teste
        ArrayList<Saida> saidas;
        try {
            saidas = Saida.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
            
            for(Saida s : saidas){
                int valido=1;
                if(s.getValida().equals("inválida")){
                    valido=0;
                }
                if (s.getNome().equals(jComboBox3.getSelectedItem().toString())){
                    CasoTeste cs = new CasoTeste(s.getId(),Integer.valueOf(jTextField1.getText()), valido, controleInterface.getProjeto_aberto().getId());
                    cs.save();
                    System.out.println(cs.getId());
                }
            }
        atualizaCasosTeste(tbCasosParticionamento, TipoCriterio.PARTICIONAMENTO_CLASSES.toString());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_btCasosTesteClassesActionPerformed
    
    /**
     * Limpa todos os campos do formulário da aba Domínio de Entrada
     */
    private void LimparEntrada(){
        tfVariavelEntrada.setText("");
        cbClasseValida.removeAllItems();
        cbClasseInvalida.removeAllItems();
        itensClasseValida.removeAllElements();
        itensClasseInvalida.removeAllElements();
        cbTipoVariavelEntrada.setSelectedIndex(0);
    }
    
    /**
     * Limpa todos os campos do formulário da aba Domínio de Saída
     */
     private void LimparCamposTabSaidas(){
        nomePadraoSaida.setText("");
        jComboBox1.setSelectedIndex(0);
        conteudoDaSaida.setText("");
    }
     
    /**
  * Atualiza a tabela de Casos de Teste
  * @throws ClassNotFoundException
  * @throws SQLException
  */
    private void atualizaCasosTeste(JTable table, String criterio) throws ClassNotFoundException, SQLException{
          
          controleInterface.obterCasosTeste(criterio);
          //preencher a tabela com os dados de teste
          String colunas[] = new String[3];
          colunas[0] = "Id Caso_Teste";
          colunas[1] = "Id Dado_Teste";
          colunas[2] = "Id Saída";
          DefaultTableModel modelo = new DefaultTableModel();
          modelo.setColumnIdentifiers(colunas);
          //Insere cada Dado de Teste na Tabela
          for(int i = 0; i < controleInterface.getCasosTeste().size(); i++){
            String linha[] = new String[3];
            //Cada dado de entrada em um célula
            for(int k = 0; k < 3; k++) {
                if(k == 0)
                    linha[k] = controleInterface.getCasosTeste().get(i).getId().toString();
                else if(k==1)
                    linha[k] = controleInterface.getCasosTeste().get(i).getId_Dado_Teste().toString();
                else if(k==2)
                    linha[k] = controleInterface.getCasosTeste().get(i).getId_saida().toString();
                //linha[k] = "caso teste!";
            }
            modelo.addRow(linha);
          }
          table.setModel(modelo);
    }
    
    /**
     * Preenche a tabela da aba Domínio de Saída com os registros do banco
     */
    private void PreencherTabelaSaidas(){
        //Atualiza nova saída na tabela
        if (controleInterface.getProjeto_aberto() != null) {
        try {
            int id = controleInterface.getProjeto_aberto().getId();
            ArrayList<Saida> saidas = Saida.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
            String[] colunas = new String []{"Id", "Nome", "Conteúdo", "Tipo"};
            String c[][] = new String[(saidas.size()+1)][4];
            int i = 0;
            
            for ( i=0 ; i < saidas.size() ; i++ ) {
                c[i][0] = saidas.get(i).getId().toString();
                c[i][1] = saidas.get(i).getNome();
                c[i][2] = saidas.get(i).getConteudo();
                c[i][3] = saidas.get(i).getValida();
            }
            
            javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(c, colunas);
            tabelaDeSaidas.setModel(modelo);
            
        } catch (Exception e) {
            e.printStackTrace();
        }}
    }
    
    /**
     * Método responsável por cadastrar a relação entre as causas e efeitos
     */
    private void PopulaCausaEfeito(){
      try {
            Integer result = 0;
            CausaEfeito x;
            
            String id = jComboBox12.getSelectedItem().toString();
            String[] id_causa = id.split(" ");
            
            String idE = jComboBox8.getSelectedItem().toString();
            String[] id_efeito = idE.split(" ");
            
            String TipoRel = "";
            
            if(jRadioButton1.isSelected()){
                TipoRel = TipoRelacionamento.IDENTIDADE.toString();
            }
            else if (jRadioButton2.isSelected()){                
                TipoRel = TipoRelacionamento.NOT.toString();    
            }
            else 
                JOptionPane.showMessageDialog(null, "Escolha um tipo de relacionamento.");
                           
            if (!TipoRel.equals("")){

                if(id_causa[2].equals("Causa:")){
                    x = new CausaEfeito(Integer.parseInt(id_causa[0]), 0, Integer.parseInt(id_efeito[0]), TipoRel, controleInterface.getProjeto_aberto().getId());
                }
                else {
                    x = new CausaEfeito(0, Integer.parseInt(id_causa[0]), Integer.parseInt(id_efeito[0]), TipoRel, controleInterface.getProjeto_aberto().getId());
                }
                result = x.save();

                PreencheTabelaCausaEfeito();
                mostraJanelaGrafo();
               
                //limpar
                limpar();

            }
        } catch (Exception e) {
            e.printStackTrace();            
        }
    }
    
    /**
     * Na aba Grafos e efeitos, preenche o grid na tela, ao se acdicionar qualquer registro
     */
    private void PreencheTabela() {
        if (controleInterface.getProjeto_aberto() != null) {
            try {

                ArrayList<Causa> o = Causa.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
                ArrayList<Efeito> e = Efeito.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());

                String[] colunas = new String []{"Id do Nó", "Id da Entrada", "Id da Saída", "Tipo", "Nome", "Valor"};
                String c[][] = new String[(o.size()+e.size()+1)][6];
                int i = 0;
                int j = 0;

                for (i = 0; i < o.size(); i++) {

                    c[i][0]=o.get(i).getId().toString();   
                    c[i][1]=o.get(i).getId_entrada().toString();   
                    c[i][2]=null;   
                    c[i][3]="Causa";   
                    c[i][4]= o.get(i).getNome();  
                    c[i][5]=o.get(i).getValor().toString();                                 
                }

                for (;i < (e.size()+o.size()); i++, j++) {
                    c[i][0]=e.get(j).getId().toString();   
                    c[i][1]=null;   
                    c[i][2]=e.get(j).getId_saida().toString();   
                    c[i][3]="Efeito";   
                    c[i][4]= e.get(j).getNome();  
                    c[i][5]=null;                                 
                }

                javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(c, colunas);             
                tbCausasEfeitos.setModel(modelo);     


            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    /**
     * Preenche a tabela de visualização de dados, a qual é atualizada em tempo real, ao se adicionar um novo registro
     * de causa composta
     */
    private void PreencheTabelaCausaComposta() {
        try {
            ArrayList<CausaComposta> compostas = CausaComposta.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
            
            String[] colunas = new String []{"Id", "Causa1_id", "Causa2_id", "CausaComposta1_id", "CausaComposta2_id", "TipoRelacionamento", "Relacao_c1", "Relacao_c2"};
            String c[][] = new String[(compostas.size()+1)][8];
            int i = 0;
            
            for ( i=0 ; i < compostas.size() ; i++ ) {
                c[i][0] = compostas.get(i).getId().toString();
                c[i][1] = compostas.get(i).getCausa1_id().toString();
                c[i][2] = compostas.get(i).getCausa2_id().toString();
                c[i][3] = compostas.get(i).getCausa_composta1_id().toString();
                c[i][4] = compostas.get(i).getCausa_composta2_id().toString();
                c[i][5] = compostas.get(i).getTipo_relacionamento().toString();
                c[i][6] = compostas.get(i).getRelacao_c1().toString();
                c[i][7] = compostas.get(i).getRelacao_c2().toString();
            }
            
            javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(c, colunas);
            tabelaRelCausaEfeito.setModel(modelo);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Preenche a tabela de visualização de dados, a qual é atualizada em tempo real, ao se adicionar um novo registro
     * de relacionamento entre causas e efeitos
     */
    private void PreencheTabelaCausaEfeito() {
        try {
            ArrayList<CausaEfeito> causasEfeitos = CausaEfeito.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
            
            String[] colunas = new String []{"Id_Causa", "Id_CausaComposta", "Id_Efeito", "TipoRelacionamento"};
            String c[][] = new String[(causasEfeitos.size()+1)][4];
            int i = 0;
            
            for ( i=0 ; i < causasEfeitos.size() ; i++ ) {
                c[i][0] = causasEfeitos.get(i).getId_causa().toString();
                c[i][1] = causasEfeitos.get(i).getId_causa_composta().toString();
                c[i][2] = causasEfeitos.get(i).getId_efeito().toString();
                c[i][3] = causasEfeitos.get(i).getTipo_relacionamento().toString();
            }
            
            javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(c, colunas);
            tabelaCausasCompostas.setModel(modelo);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Preenche a tabela de visualização de dados, a qual é atualizada em tempo real, ao se adicionar um novo registro
     * de restrição de causa
     */
    private void PreencheTabelaRestricoesCausa() {  
        try {
            ArrayList<CausaRestricao> causaRestr = CausaRestricao.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString(), "order by grupo asc");
            String[] colunas = new String []{"Id Causa", "Restricao", "Grupo", "Consequência"};
            String c[][] = new String[(causaRestr.size()+1)][4];
            for(int i=0 ; i<causaRestr.size() ; i++) {
                c[i][0] = causaRestr.get(i).getId_causa().toString();
                c[i][1] = causaRestr.get(i).getId_restricao().toString();
                c[i][2] = causaRestr.get(i).getGrupo().toString();
                c[i][3] = causaRestr.get(i).getConsequencia().toString();
            }
            
            javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(c, colunas);
            tabelaRestricoesCausa.setModel(modelo);
        } catch (Exception e) {
            e.printStackTrace();
        }   
    }
    
    /**
     * Preenche a tabela de visualização de dados, a qual é atualizada em tempo real, ao se adicionar um novo registro
     * de restrição de efeito
     */
    private void PreencheTabelaRestricoesEfeito() {
        try {
            ArrayList<EfeitoRestricao> efeitoRestr = EfeitoRestricao.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString(), "order by grupo asc");
            String[] colunas = new String []{"Id Efeito", "Restricao", "Grupo", "Consequência"};
            String c[][] = new String[(efeitoRestr.size()+1)][4];
            for(int i=0 ; i<efeitoRestr.size() ; i++) {
                c[i][0] = efeitoRestr.get(i).getId_efeito().toString();
                c[i][1] = efeitoRestr.get(i).getId_restricao().toString();
                c[i][2] = efeitoRestr.get(i).getGrupo().toString();
                c[i][3] = efeitoRestr.get(i).getConsequencia().toString();
            }
            
            javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(c, colunas);
            tabelaRestricoesEfeito.setModel(modelo);
        } catch (Exception e) {
            e.printStackTrace();
        } 
    }

    /**
     * Lista no combobox todos os efeitos cadastrados no banco de dados, na aba Causas -> Efeitos
     */
    private void PopulaComboEfeitos() {
        if (controleInterface.getProjeto_aberto() != null) {
            try {
                jComboBox8.removeAllItems();
                jComboBox8.addItem("<Selecione>");
                ArrayList<Efeito> ef = Efeito.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());

                for (int i = 0; i < ef.size(); i++) {
                    Efeito e = ef.get(i);
                    jComboBox8.addItem(e.getId() + " - " +e.getNome().toString());
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
       
    /**
     * Lista no combobox todas as causas e também as causas compostas cadastradas no banco de dados, 
     * na aba Causas -> Efeitos
     */
    private void PopulaComboCausas() {
        if (controleInterface.getProjeto_aberto() != null) {
            try {

                jComboBox12.removeAllItems();
                jComboBox12.addItem("<Selecione>");

                ArrayList<Causa> o = Causa.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
                ArrayList<CausaComposta> cc = CausaComposta.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());

                for (int i = 0; i < o.size(); i++) {
                    Causa c = o.get(i);
                    jComboBox12.addItem(c.getId().toString() +" - Causa: " + c.getNome().toString());
                }

                for (int i = 0; i < cc.size(); i++) {
                    CausaComposta cc1 = cc.get(i);
                    jComboBox12.addItem(cc1.getId().toString() +" - Causa_Composta: " + cc1.getId().toString() + " " + DesenhaGrafo.imprimeRelacao(cc1.getTipo_relacionamento()));
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 
    /**
     * Lista no primeiro combobox todas as causas e também as causas compostas cadastradas no banco de dados, 
     * na aba Causas Compostas
     */
    private void PopulaComboCausas1() {
        if (controleInterface.getProjeto_aberto() != null) {
            try {
                jComboBox16.removeAllItems();            
                jComboBox16.addItem("<Selecione>");

                ArrayList<Causa> o = Causa.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
                ArrayList<CausaComposta> cc = CausaComposta.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());

                for (int i = 0; i < o.size(); i++) {
                    Causa c = o.get(i);
                    jComboBox16.addItem(c.getId().toString() +" - Causa: " + c.getNome().toString());
                }

                for (int i = 0; i < cc.size(); i++) {
                    CausaComposta cc1 = cc.get(i);
                    jComboBox16.addItem(cc1.getId().toString() +" - Causa_Composta: " + cc1.getId().toString() + " " + DesenhaGrafo.imprimeRelacao(cc1.getTipo_relacionamento()));
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
     /**
     * Lista no segundo combobox todas as causas e também as causas compostas cadastradas no banco de dados, 
     * na aba Causas Compostas
     */           
    private void PopulaComboCausas2() {
        if (controleInterface.getProjeto_aberto() != null) {
           try {

                jComboBox18.removeAllItems();            
                jComboBox18.addItem("<Selecione>");

                ArrayList<Causa> o = Causa.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());
                ArrayList<CausaComposta> cc = CausaComposta.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());

                for (int i = 0; i < o.size(); i++) {
                    Causa c = o.get(i);
                    jComboBox18.addItem(c.getId().toString() +" - Causa: " + c.getNome().toString());
                }

                for (int i = 0; i < cc.size(); i++) {
                    CausaComposta cc1 = cc.get(i);
                    jComboBox18.addItem(cc1.getId().toString() +" - Causa_Composta: " + cc1.getId().toString() + " " + DesenhaGrafo.imprimeRelacao(cc1.getTipo_relacionamento()));
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    /**
     * Limpa os componentes da aba Causas compostas
     */
    private void LimpaComboCausaComposta(){
        jComboBox12.removeAllItems();
        jComboBox16.removeAllItems();
        jComboBox18.removeAllItems();
    }
    
    /**
     * Lista no primeiro combobox todas as entradas cadastradas no banco de dados, 
     * na aba Causas e efeitos, para o cadastro de causas no sistema
     */
    private void PopulaComboEntradas() {
        if (controleInterface.getProjeto_aberto() != null) {
            try {

                comboEntradasGrafo.removeAllItems();
                comboEntradasGrafo.addItem("<Selecione>");

                ArrayList<Entrada> o = Entrada.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());

                for (int i = 0; i < o.size(); i++) {
                    Entrada c = o.get(i);
                    comboEntradasGrafo.addItem(c.getNome().toString());

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Lista no segundo combobox todos os efeitos cadastrados no banco de dados, 
     * na aba Causas e efeitos, para o cadastro de efeitos no sistema
     */
    private void PopulaComboSaidas() {
        if (controleInterface.getProjeto_aberto() != null) {
            try {

                comboSaidasGrafo.removeAllItems();
                comboSaidasGrafo.addItem("<Selecione>");

                ArrayList<Saida> o = Saida.getByColumn("id_projeto", controleInterface.getProjeto_aberto().getId().toString());

                for (int i = 0; i < o.size(); i++) {
                    Saida c = o.get(i);
                    comboSaidasGrafo.addItem(c.getNome().toString());

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        controleInterface = new ControleInterface();

        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmInterfacePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrmInterfacePrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane abasGrafo;
    private javax.swing.JButton botaoAdicionaCausaComposta;
    private javax.swing.JButton botaoAdicionaCausaEfeito;
    private javax.swing.JButton botaoAdicionaRestricao;
    private javax.swing.JButton btCasosTesteClasses;
    private javax.swing.JButton btCasosTesteLimite;
    private javax.swing.JButton btDadosAnVlLimite;
    private javax.swing.JButton btDadosPTClasses;
    private javax.swing.JButton btnAdicionarEntrada;
    private javax.swing.JButton btnLimpar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField campoDescricaoEntrada;
    private javax.swing.JTextField campoDescricaoSaida;
    private javax.swing.JTextField campoValorEntrada;
    private javax.swing.JComboBox cbClasseInvalida;
    private javax.swing.JComboBox cbClasseValida;
    private javax.swing.JComboBox cbTipoVariavelEntrada;
    private java.awt.Choice choice1;
    private javax.swing.JComboBox comboEntradasGrafo;
    private javax.swing.JComboBox comboRestricoesCausa;
    private javax.swing.JComboBox comboRestricoesCausaOuEfeito;
    private javax.swing.JComboBox comboRestricoesEfeitos;
    private javax.swing.JComboBox comboSaidasGrafo;
    private javax.swing.JTextArea conteudoDaSaida;
    private javax.swing.ButtonGroup grupoCausaEfeitoRelacionamento;
    private javax.swing.ButtonGroup grupoCompostaRelacao2;
    private javax.swing.ButtonGroup grupoEntreCausas;
    private javax.swing.ButtonGroup grupoRestricaoConsequencia;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox12;
    private javax.swing.JComboBox jComboBox16;
    private javax.swing.JComboBox jComboBox18;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList3;
    private javax.swing.JList jList4;
    private javax.swing.JList jListClasseInvalida;
    private javax.swing.JList jListClasseValida;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbrirProjeto;
    private javax.swing.JMenuItem jMenuItemNovo;
    private javax.swing.JMenu jMenuProjeto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableEntradas;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField nomePadraoSaida;
    private javax.swing.JPanel painelGrafoCausasCompostas;
    private javax.swing.JPanel painelGrafoCausasEEfeitos;
    private javax.swing.JPanel painelGrafoRelCausaEfeito;
    private javax.swing.JPanel painelGrafoRestricoes;
    private javax.swing.JPanel painelGrafoTabela;
    private java.awt.Panel panel2;
    private java.awt.Panel panel3;
    private java.awt.Panel panel4;
    private java.awt.Panel panel5;
    private javax.swing.JPanel panelEntrada;
    private javax.swing.JPanel panelGrafo;
    private javax.swing.JPanel panelParticionamento;
    private javax.swing.JPanel panelValorLimite;
    private javax.swing.JTable tabelaCausasCompostas;
    private javax.swing.JTable tabelaDeSaidas;
    private javax.swing.JTable tabelaRelCausaEfeito;
    private javax.swing.JTable tabelaRestricoesCausa;
    private javax.swing.JTable tabelaRestricoesEfeito;
    private javax.swing.JTable tbCasosLimite;
    private javax.swing.JTable tbCasosParticionamento;
    private javax.swing.JTable tbCausasEfeitos;
    private javax.swing.JTable tbDecisaoCausa;
    private javax.swing.JTable tbDecisaoEfeito;
    private javax.swing.JTable tbPartClasses;
    private javax.swing.JTable tbValorLimite;
    private java.awt.TextArea textArea1;
    private java.awt.TextArea textArea2;
    private java.awt.TextArea textArea3;
    private java.awt.TextArea textArea5;
    private java.awt.TextArea textArea6;
    private java.awt.TextArea textArea7;
    private javax.swing.JTextField tfVariavelEntrada;
    // End of variables declaration//GEN-END:variables
}
